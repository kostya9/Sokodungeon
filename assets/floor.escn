[gd_scene load_steps=1 format=2]

[ext_resource id=1 path="PolygonPrototype_Texture_03.png" type="Texture"]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0: hint_albedo;


void dir_space_convert_view_to_world(inout vec3 dir, in mat4 inv_view_mat) {
    dir = normalize(inv_view_mat * vec4(dir, 0.0)).xyz;
}


void dir_space_convert_world_to_view(inout vec3 dir, in mat4 view_mat) {
    dir = normalize(view_mat * vec4(dir, 0.0)).xyz;
}


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_normal_map_tangent(float strength, vec4 color, vec3 normal,
        vec3 tangent, vec3 binormal, out vec3 out_normal) {
    vec3 signed_color = vec3(2.0, -2.0, -2.0) * (color.xyz - vec3(0.5));
    vec3 tex_normal = signed_color.x * tangent +
                      signed_color.y * binormal +
                      signed_color.z * normal;
    out_normal = strength * tex_normal + (1.0 - strength) * normal;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}


void space_convert_yup_to_zup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, 1), vec3(0, -1, 0)) * dir;
}


void space_convert_zup_to_yup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, -1), vec3(0, 1, 0)) * dir;
}

void vertex () {
}

void fragment () {
	mat4 INV_VIEW_MAT = inverse(INV_CAMERA_MATRIX);
	
	// node: 'Normal Map'
	// type: 'ShaderNodeNormalMap'
	// input sockets handling
	float node0_in0_strength = float(1.0);
	vec4 node0_in1_color = vec4(0.5, 0.5, 1.0, 1.0);
	// output sockets definitions
	vec3 node0_out0_normal;
	
	node_normal_map_tangent(node0_in0_strength, node0_in1_color, NORMAL, TANGENT,
		BINORMAL, node0_out0_normal);
	dir_space_convert_view_to_world(node0_out0_normal, INV_VIEW_MAT);
	space_convert_yup_to_zup(node0_out0_normal);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node1_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node1_out0_color;
	float node1_out1_alpha;
	
	node1_in0_vector = vec3(UV, 0.0);
	node_tex_image(node1_in0_vector, texture_0, node1_out0_color, node1_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node2_in0_basecolor = node1_out0_color;
	float node2_in1_subsurface = float(0.0);
	vec3 node2_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node2_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node2_in4_metallic = float(0.5);
	float node2_in5_specular = float(1.0);
	float node2_in6_speculartint = float(0.0);
	float node2_in7_roughness = float(0.7487671971321106);
	float node2_in8_anisotropic = float(0.0);
	float node2_in9_anisotropicrotation = float(0.0);
	float node2_in10_sheen = float(0.0);
	float node2_in11_sheentint = float(0.5);
	float node2_in12_clearcoat = float(0.0);
	float node2_in13_clearcoatroughness = float(0.029999999329447746);
	float node2_in14_ior = float(1.4500000476837158);
	float node2_in15_transmission = float(0.0);
	float node2_in16_transmissionroughness = float(0.0);
	vec4 node2_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node2_in18_emissionstrength = float(1.0);
	float node2_in19_alpha = float(1.0);
	vec3 node2_in20_normal = node0_out0_normal;
	vec3 node2_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node2_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node2_bsdf_out0_albedo;
	float node2_bsdf_out1_sss_strength;
	float node2_bsdf_out3_specular;
	float node2_bsdf_out2_metallic;
	float node2_bsdf_out4_roughness;
	float node2_bsdf_out5_clearcoat;
	float node2_bsdf_out6_clearcoat_gloss;
	float node2_bsdf_out7_anisotropy;
	float node2_bsdf_out8_transmission;
	float node2_bsdf_out9_ior;
	
	node_bsdf_principled(node2_in0_basecolor, node2_in1_subsurface,
		node2_in3_subsurfacecolor, node2_in4_metallic, node2_in5_specular,
		node2_in7_roughness, node2_in12_clearcoat, node2_in13_clearcoatroughness,
		node2_in8_anisotropic, node2_in15_transmission, node2_in14_ior,
		node2_bsdf_out0_albedo, node2_bsdf_out1_sss_strength, node2_bsdf_out2_metallic,
		node2_bsdf_out3_specular, node2_bsdf_out4_roughness, node2_bsdf_out5_clearcoat,
		node2_bsdf_out6_clearcoat_gloss, node2_bsdf_out7_anisotropy,
		node2_bsdf_out8_transmission, node2_bsdf_out9_ior);
	space_convert_zup_to_yup(node2_in20_normal);
	dir_space_convert_world_to_view(node2_in20_normal, INV_CAMERA_MATRIX);
	
	
	ALBEDO = node2_bsdf_out0_albedo;
	SSS_STRENGTH = node2_bsdf_out1_sss_strength;
	SPECULAR = node2_bsdf_out3_specular;
	METALLIC = node2_bsdf_out2_metallic;
	ROUGHNESS = node2_bsdf_out4_roughness;
	CLEARCOAT = node2_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node2_bsdf_out6_clearcoat_gloss;
	NORMAL = node2_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node2_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node2_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node2_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)
shader_param/texture_0 = ExtResource(1)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "Mesh"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(-3.67656, 100.0, 0.0, 0.0, 100.0, 2.64313, 0.0, 95.816, 0.0, 0.0, 70.5644, 0.0, -3.67656, 100.0, 0.0, 0.0, 95.816, 0.0, -98.7568, 1.58324, 0.0, -88.6219, 0.0, 0.0, -100.0, 0.0, 3.3492, -100.0, 0.0, 10.0, 0.0, 0.0, 10.0, -100.0, 100.0, 10.0, -26.8892, 100.0, 10.0, 0.0, 0.0, 10.0, 0.0, 100.0, 10.0, -26.8892, 100.0, 10.0, 0.0, 4.96676, 0.0, 0.0, 0.0, 3.09055, -2.46534, 0.0, 0.0, -100.0, 0.0, 3.3492, -99.2657, 8.53479, 0.0, -98.7568, 1.58324, 0.0, -100.0, 100.0, 10.0, -26.8892, 100.0, 10.0, -100.0, 100.0, 2.37286, -26.5467, 100.0, 6.02489, 0.0, 52.9651, 2.60113, 0.0, 0.0, 10.0, 0.0, 50.8058, 0.0, 0.0, 0.0, 3.09055, 0.0, 4.96676, 0.0, -100.0, 0.0, 10.0, -66.8025, 0.0, 3.01045, 0.0, 0.0, 10.0, -73.8667, 0.0, 0.0, -88.6219, 0.0, 0.0, -26.0277, 99.0616, 0.0, -73.8667, 0.0, 0.0, -61.0132, 1.79365, 0.0, -52.5041, 0.0, 0.0, -66.8025, 0.0, 3.01045, -61.0132, 1.79365, 0.0, -52.5041, 0.0, 0.0, -2.46534, 0.0, 0.0, -61.0132, 1.79365, 0.0, -66.8025, 0.0, 3.01045, -73.8667, 0.0, 0.0, -100.0, 100.0, 2.37286, -82.1324, 100.0, 0.0, -97.7115, 97.5908, 0.0, -100.0, 100.0, 2.37286, -97.7115, 97.5908, 0.0, -100.0, 71.783, 0.0, 0.0, 70.5644, 0.0, 0.0, 100.0, 10.0, 0.0, 95.816, 0.0, -3.0365, 53.9443, 0.0, 0.0, 52.9651, 2.60113, -3.0365, 53.9443, 0.0, 0.0, 70.5644, 0.0, 0.0, 50.8058, 0.0, -3.0365, 53.9443, 0.0, 0.0, 52.9651, 2.60113, -26.0277, 99.0616, 0.0, -26.5467, 100.0, 6.02489, -3.67656, 100.0, 0.0, 0.0, 100.0, 2.64313, 0.0, 100.0, 2.64313, 0.0, 100.0, 10.0, -100.0, 100.0, 2.37286, -26.5467, 100.0, 6.02489, -82.1324, 100.0, 0.0, -26.0277, 99.0616, 0.0, -100.0, 0.0, 3.3492, -88.6219, 0.0, 0.0, -100.0, 71.783, 0.0, -100.0, 100.0, 10.0, -100.0, 100.0, 2.37286, -100.0, 71.783, 0.0, -99.2657, 8.53479, 0.0, -98.7568, 1.58324, 0.0, -97.7115, 97.5908, 0.0, -82.1324, 100.0, 0.0, -100.0, 0.0, 3.3492, -100.0, 71.783, 0.0, -99.2657, 8.53479, 0.0, -100.0, 0.0, 10.0, -100.0, 0.0, 3.3492, 0.0, 100.0, 2.64313, -52.5041, 0.0, 0.0, 0.0, 50.8058, 0.0, 0.0, 4.96676, 0.0, -2.46534, 0.0, 0.0, 0.0, 0.0, 3.09055),
		Vector3Array(0.519384, 0.456397, -0.722456, 0.519384, 0.456397, -0.722456, 0.519384, 0.456397, -0.722456, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -0.136693, -0.875023, -0.464381, -0.136693, -0.875023, -0.464381, -0.136693, -0.875023, -0.464381, 0.0, 0.0, 1.0, 0.0, -2.7781e-09, 1.0, 0.0, -4.17415e-09, 1.0, 0.0, -4.87218e-09, 1.0, 0.0, -2.7781e-09, 1.0, 0.0, 0.0, 1.0, 0.0, -4.87218e-09, 1.0, 0.728799, -0.361753, -0.581366, 0.728799, -0.361753, -0.581366, 0.728799, -0.361753, -0.581366, -0.924486, -0.067675, -0.37516, -0.924486, -0.067675, -0.37516, -0.924486, -0.067675, -0.37516, 0.0, 1.0, 0.0, 1.02878e-07, 1.0, 0.0, 7.42589e-09, 1.0, 0.0, 9.62649e-08, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -0.147339, -0.698981, -0.699798, -0.147339, -0.698981, -0.699798, -0.147339, -0.698981, -0.699798, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.131466, -0.942098, -0.308494, 0.131466, -0.942098, -0.308494, 0.131466, -0.942098, -0.308494, -0.100243, 0.648217, -0.754829, -0.100243, 0.648217, -0.754829, -0.100243, 0.648217, -0.754829, -0.686833, 0.0609053, -0.724259, -0.686833, 0.0609053, -0.724259, -0.686833, 0.0609053, -0.724259, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.624821, -0.114155, -0.772377, 0.624821, -0.114155, -0.772377, 0.624821, -0.114155, -0.772377, 0.622439, 0.602212, -0.499911, 0.622439, 0.602212, -0.499911, 0.622439, 0.602212, -0.499911, -0.041426, 0.986689, -0.157252, -0.0389491, 0.988243, -0.147849, -0.00664907, 0.999659, -0.0252381, -7.38927e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 4.67886e-06, 0.0161049, 0.988769, -0.14858, 0.000843569, 0.999969, -0.00777912, 0.0165285, 0.988167, -0.15249, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -0.970344, -0.0112662, -0.241464, -0.970344, -0.0112662, -0.241464, -0.970344, -0.0112662, -0.241464, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0),
		FloatArray(1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -0.447214, 0.894427, 0.0, 1.0, -0.447214, 0.894427, 2.4848e-09, 1.0, -0.447214, 0.894427, 3.73348e-09, 1.0, 1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.271304, -0.962494, 1.0, 0.0, 0.371991, -0.928236, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.338454, 0.940983, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.338454, 0.940983, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, -0.946852, -0.321669, 1.0, 0.0, -0.462463, -0.886638, 1.0, 1.0, 0.0, 0.0, -1.0, 0.338454, 0.940983, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.990436, -0.137976, 1.0, 0.0, 0.990435, -0.137976, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.990436, -0.137976, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.47737, 0.878702, 0.0, -1.0, 0.47737, 0.878702, 0.0, -1.0, 0.47737, 0.878702, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713, 0.24776, 0.696713),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 11, 12, 10, 13, 15, 14, 16, 18, 17, 19, 21, 20, 22, 24, 23, 24, 25, 23, 26, 28, 27, 27, 28, 29, 28, 30, 29, 31, 33, 32, 31, 32, 34, 35, 37, 36, 36, 37, 38, 39, 41, 40, 32, 33, 42, 33, 43, 42, 44, 46, 45, 47, 49, 48, 50, 52, 51, 26, 54, 53, 54, 55, 53, 54, 26, 27, 56, 36, 38, 57, 59, 58, 60, 62, 61, 63, 65, 64, 65, 66, 64, 67, 68, 25, 68, 23, 25, 69, 71, 70, 71, 72, 70, 73, 31, 74, 31, 34, 74, 75, 77, 76, 78, 79, 36, 80, 35, 79, 79, 35, 36, 78, 82, 81, 78, 36, 82, 83, 85, 84, 86, 87, 75, 86, 75, 76, 54, 88, 55, 3, 4, 36, 3, 36, 56, 38, 89, 56, 89, 90, 56, 89, 91, 90, 89, 92, 91, 33, 93, 43)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="SM_Buildings_Floor_1x1_01P" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(0.01, 0.0, 0.0, 0.0, -1.62921e-09, -0.01, 0.0, 0.01, -1.62921e-09, 0.0, 0.0, 0.0)
